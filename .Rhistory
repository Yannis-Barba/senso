geom_density() +
geom_vline(data = data.frame(m = means[c(1:3)], gp = as.factor(c(1,2,3))), aes(xintercept=m, color=gp), linetype="dashed") +
ggtitle("500 réalisations \n de plusieurs lois uniformes") +
labs(x = "Valeurs prises par les réalisations", y = "Densité") +
theme_tufte()+
theme(plot.title=element_text(size=10, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#e9e3e6", color = "#e9e3e6"))
## rajouter une gaussienne pour comparer
sumUnif500 <- ggplot(data.frame(sum=c(sums, rnorm(100, mean=mean(sums), sd=sd(sums))), cl=c(rep("sum", 100), rep("rnorm", 100)))) +
aes(x=sum, color=cl) +
geom_density() +
ggtitle("Somme \n de 500 lois uniformes") +
labs(x = "Valeurs prises par les réalisations", y = "Densité")+
theme_tufte()+
theme(plot.title=element_text(size=10, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#e9e3e6", color = "#e9e3e6"))
meanUnif500 <- ggplot(data.frame(mean=means)) +
aes(x=mean) +
geom_density() +
geom_vline(xintercept = mean(means), col = "blue") +
geom_vline(xintercept = IC[1], col = "red") +
geom_vline(xintercept = IC[2], col = "red")+
ggtitle("Moyenne \n de 500 lois uniformes") +
labs(x = "Valeurs prises par les réalisations", y = "Densité")+
theme_tufte()+
theme(plot.title=element_text(size=10, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#e9e3e6", color = "#e9e3e6"))
echSimple <- ggplot(data.frame(ech=ech)) +
aes(x=ech) +
geom_density() +
ggtitle("500 réalisations \n d'une loi uniforme") +
labs(x = "Valeurs prises par les réalisations", y = "Densité")+
theme_tufte() +
theme(plot.title=element_text(size=10, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#f1d6b8", color = "#f1d6b8"))
echIC_ech <- ggplot(data.frame(ech=ech)) +
aes(x=ech) +
geom_density() +
geom_vline(xintercept = mean(ech), col = "blue") +
geom_vline(xintercept = IC_ech[1], col = "green") +
geom_vline(xintercept = IC_ech[2], col = "green") +
labs(title ="IC" , subtitle = "[mu - 2 * sigma/sqrt(n); mu + 2 * sigma/sqrt(n)]", x = "Valeurs prises par les réalisations", y = "Densité")+
theme_tufte() +
theme(plot.title=element_text(size=10, hjust = 0.5), plot.subtitle = element_text(size=6, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#f1d6b8", color = "#f1d6b8"))
echIC <- ggplot(data.frame(ech=ech)) +
aes(x=ech) +
geom_density() +
geom_vline(xintercept = mean(ech), col = "blue") +
geom_vline(xintercept = IC_comp[1], col = "red") +
geom_vline(xintercept = IC_comp[2], col = "red")+
labs(title = "IC", subtitle = "[mu - 2 * sigma/sqrt(n); mu + 2 * sigma/sqrt(n)]", x = "Valeurs prises par les réalisations", y = "Densité")+
theme_tufte() +
theme(plot.title=element_text(size=10, hjust = 0.5), plot.subtitle = element_text(size=6, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#f1d6b8", color = "#f1d6b8"))
pvalOnly <- ggplot(data.frame(mu=mu, pval=pval)) +
aes(x=mu, y=pval) +
geom_line() +
geom_vline(xintercept = mean(ech), col = "blue") +
geom_hline(yintercept = 0.05, col="red") +
labs(title = "p-value", subtitle = "pour H0 avec mu € [0,1]", x = "mu", y = "p-value")+
theme_tufte() +
theme(plot.title=element_text(size=10, hjust = 0.5), plot.subtitle = element_text(size=6, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#D5CFE1", color = "#D5CFE1"))
pvalIC <- ggplot(data.frame(mu=mu, pval=pval)) +
aes(x=mu, y=pval) +
geom_line() +
geom_vline(xintercept = mean(ech), col = "blue") +
geom_vline(xintercept = IC_ech[1], col = "green") +
geom_vline(xintercept = IC_ech[2], col = "green") +
labs(title = "p-value", subtitle = "pour H0 avec mu € [0,1]", x = "mu", y = "p-value")+
theme_tufte() +
theme(plot.title=element_text(size=10, hjust = 0.5), plot.subtitle = element_text(size=6, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#D5CFE1", color = "#D5CFE1"))
gl <- list(unif500, sumUnif500, meanUnif500, echSimple, echIC_ech, echIC, t(""),pvalOnly, pvalIC,
t("Nombre Important de simulation"), t("Un seul échantillon et théorie"), t("Comparaison avec la p-value"))
grid.arrange(
grobs = gl,
widths = c(1, 1, 1),
heights = c(1,3,3,3),
layout_matrix = rbind(c(10, 11, 12),
c(1, 4, 7),
c(2, 5, 8),
c(3, 6, 9)
)
)
### Liste des plots :
t <- function(title, bgcolor){
return(ggplot() +                      # Draw ggplot2 plot with text only
annotate("text",
x = 1,
y = 0,
size = 4,
label = title) +
theme_void()+
theme(plot.background = element_rect(fill=bgcolor, color=bgcolor))
)
}
unif500 <- ggplot(data.frame(simul=uniforms[1:1500,1], gp=as.factor(uniforms[1:1500, 2]))) +
aes(x=simul, color=gp) +
geom_density() +
geom_vline(data = data.frame(m = means[c(1:3)], gp = as.factor(c(1,2,3))), aes(xintercept=m, color=gp), linetype="dashed") +
ggtitle("500 réalisations \n de plusieurs lois uniformes") +
labs(x = "Valeurs prises par les réalisations", y = "Densité") +
theme_tufte()+
theme(plot.title=element_text(size=10, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#e9e3e6", color = "#e9e3e6"))
## rajouter une gaussienne pour comparer
sumUnif500 <- ggplot(data.frame(sum=c(sums, rnorm(100, mean=mean(sums), sd=sd(sums))), cl=c(rep("sum", 100), rep("rnorm", 100)))) +
aes(x=sum, color=cl) +
geom_density() +
ggtitle("Somme \n de 500 lois uniformes") +
labs(x = "Valeurs prises par les réalisations", y = "Densité")+
theme_tufte()+
theme(plot.title=element_text(size=10, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#e9e3e6", color = "#e9e3e6"))
meanUnif500 <- ggplot(data.frame(mean=means)) +
aes(x=mean) +
geom_density() +
geom_vline(xintercept = mean(means), col = "blue") +
geom_vline(xintercept = IC[1], col = "red") +
geom_vline(xintercept = IC[2], col = "red")+
ggtitle("Moyenne \n de 500 lois uniformes") +
labs(x = "Valeurs prises par les réalisations", y = "Densité")+
theme_tufte()+
theme(plot.title=element_text(size=10, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#e9e3e6", color = "#e9e3e6"))
echSimple <- ggplot(data.frame(ech=ech)) +
aes(x=ech) +
geom_density() +
ggtitle("500 réalisations \n d'une loi uniforme") +
labs(x = "Valeurs prises par les réalisations", y = "Densité")+
theme_tufte() +
theme(plot.title=element_text(size=10, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#f1d6b8", color = "#f1d6b8"))
echIC_ech <- ggplot(data.frame(ech=ech)) +
aes(x=ech) +
geom_density() +
geom_vline(xintercept = mean(ech), col = "blue") +
geom_vline(xintercept = IC_ech[1], col = "green") +
geom_vline(xintercept = IC_ech[2], col = "green") +
labs(title ="IC" , subtitle = "[mu - 2 * sigma/sqrt(n); mu + 2 * sigma/sqrt(n)]", x = "Valeurs prises par les réalisations", y = "Densité")+
theme_tufte() +
theme(plot.title=element_text(size=10, hjust = 0.5), plot.subtitle = element_text(size=6, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#f1d6b8", color = "#f1d6b8"))
echIC <- ggplot(data.frame(ech=ech)) +
aes(x=ech) +
geom_density() +
geom_vline(xintercept = mean(ech), col = "blue") +
geom_vline(xintercept = IC_comp[1], col = "red") +
geom_vline(xintercept = IC_comp[2], col = "red")+
labs(title = "IC", subtitle = "[mu - 2 * sigma/sqrt(n); mu + 2 * sigma/sqrt(n)]", x = "Valeurs prises par les réalisations", y = "Densité")+
theme_tufte() +
theme(plot.title=element_text(size=10, hjust = 0.5), plot.subtitle = element_text(size=6, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#f1d6b8", color = "#f1d6b8"))
pvalOnly <- ggplot(data.frame(mu=mu, pval=pval)) +
aes(x=mu, y=pval) +
geom_line() +
geom_vline(xintercept = mean(ech), col = "blue") +
geom_hline(yintercept = 0.05, col="red") +
labs(title = "p-value", subtitle = "pour H0 avec mu € [0,1]", x = "mu", y = "p-value")+
theme_tufte() +
theme(plot.title=element_text(size=10, hjust = 0.5), plot.subtitle = element_text(size=6, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#D5CFE1", color = "#D5CFE1"))
pvalIC <- ggplot(data.frame(mu=mu, pval=pval)) +
aes(x=mu, y=pval) +
geom_line() +
geom_vline(xintercept = mean(ech), col = "blue") +
geom_vline(xintercept = IC_ech[1], col = "green") +
geom_vline(xintercept = IC_ech[2], col = "green") +
labs(title = "p-value", subtitle = "pour H0 avec mu € [0,1]", x = "mu", y = "p-value")+
theme_tufte() +
theme(plot.title=element_text(size=10, hjust = 0.5), plot.subtitle = element_text(size=6, hjust = 0.5), axis.title = element_text(size=8),
plot.background = element_rect(fill="#D5CFE1", color = "#D5CFE1"))
gl <- list(unif500, sumUnif500, meanUnif500, echSimple, echIC_ech, echIC,pvalOnly, pvalIC, t("", "#D5CFE1"),
t("Nombre Important de simulation", "#e9e3e6"), t("Un seul échantillon et théorie", "#f1d6b8"), t("Comparaison avec la p-value", "#D5CFE1"))
grid.arrange(
grobs = gl,
widths = c(1, 1, 1),
heights = c(1,3,3,3),
layout_matrix = rbind(c(10, 11, 12),
c(1, 4, 7),
c(2, 5, 8),
c(3, 6, 9)
)
)
?mtext
png_file<-"./barcharts_simple_step6.png"
png(bg="grey98", png_file,width=9,height=6.5,units="in",res=200)
par(omi=c(0.65,0.25,0.75,0.75),mai=c(0.3,2,0.35,0),mgp=c(3,3,0),
family="Arial", las=1)
x<-barplot(Percent,names.arg=F,horiz=T,border=NA,xlim=c(0,100),col="grey", cex.names=0.85,axes=F)
library(gdata)
ipsos <- gdata::read.xls("./ipsos.xlsx", encoding="latin1")
sort.ipsos<-ipsos[order(ipsos$Percent) ,]
#nous permet d'attacher le jeu de données au graphiques suivants
attach(sort.ipsos)
png_file<-"./barcharts_simple_step6.png"
png(bg="grey98", png_file,width=9,height=6.5,units="in",res=200)
par(omi=c(0.65,0.25,0.75,0.75),mai=c(0.3,2,0.35,0),mgp=c(3,3,0),
family="Arial", las=1)
x<-barplot(Percent,names.arg=F,horiz=T,border=NA,xlim=c(0,100),col="grey", cex.names=0.85,axes=F)
for (i in 1:length(Country))
{
if (Country[i] %in% c("Germany","Brazil"))
{myFont<-"Arial Black"} else {myFont<-"Arial"}
text(-8,x[i],Country[i],xpd=T,adj=1,cex=0.85,family=myFont)
text(-3.5,x[i],Percent[i],xpd=T,adj=1,cex=0.85,family=myFont)
}
rect(0,-0.5,20,28,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
rect(20,-0.5,40,28,col=rgb(191,239,255,120,maxColorValue=255),border=NA)
rect(40,-0.5,60,28,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
rect(60,-0.5,80,28,col=rgb(191,239,255,120,maxColorValue=255),border=NA)
rect(80,-0.5,100,28,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
myValue2<-c(0,0,0,0,27,0,0,0,0,0,0,0,0,84,0,0)
myColour2<-rgb(255,0,210,maxColorValue=255)
x2<-barplot(myValue2,names.arg=F,horiz=T,border=NA,xlim=c(0,100),col=myColour2,cex.names=0.85,axes=F,add=T)
arrows(45,-0.5,45,20.5,lwd=1.5,length=0,xpd=T,col="skyblue3")
arrows(45,-0.5,45,-0.75,lwd=3,length=0,xpd=T)
arrows(45,20.5,45,20.75,lwd=3,length=0,xpd=T)
text(41,20.5,"Average",adj=1,xpd=T,cex=0.65,font=3)
text(44,20.5,"45",adj=1,xpd=T,cex=0.65,family="Arial",font=4)
text(100,20.5,"All values in percent",adj=1,xpd=T,cex=0.65,font=3)
#mtext(c(0,20,40,60,80,100),at=c(0,20,40,60,80,100),1,line=0,cex=0.80)
mtext("'I Definitely Believe in God or a Supreme Being'",3,line=1.3,adj=0,cex=1.2,family="Arial Black",outer=T)
mtext("was said in 2010 in:",3,line=-0.4,adj=0,cex=0.9,outer=T)
mtext("Source: www.ipsos-na.com, Design: Stefan Fichtel, ixtract",1,line=1,adj=1.0,cex=0.65,outer=T,font=3)
dev.off()
png_file<-"./barcharts_simple_step7.png"
png(bg="grey98", png_file,width=9,height=6.5,units="in",res=200)
par(omi=c(0.65,0.25,0.75,0.75),mai=c(0.3,2,0.35,0),mgp=c(3,3,0),
family="Arial", las=1)
x<-barplot(Percent,names.arg=F,horiz=T,border=NA,xlim=c(0,100),col="grey", cex.names=0.85,axes=F)
for (i in 1:length(Country))
{
if (Country[i] %in% c("Germany","Brazil"))
{myFont<-"Arial Black"} else {myFont<-"Arial"}
text(-8,x[i],Country[i],xpd=T,adj=1,cex=0.85,family=myFont)
text(-3.5,x[i],Percent[i],xpd=T,adj=1,cex=0.85,family=myFont)
}
rect(0,-0.5,20,28,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
rect(20,-0.5,40,28,col=rgb(191,239,255,120,maxColorValue=255),border=NA)
rect(40,-0.5,60,28,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
rect(60,-0.5,80,28,col=rgb(191,239,255,120,maxColorValue=255),border=NA)
rect(80,-0.5,100,28,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
myValue2<-c(0,0,0,0,27,0,0,0,0,0,0,0,0,84,0,0)
myColour2<-rgb(255,0,210,maxColorValue=255)
x2<-barplot(myValue2,names.arg=F,horiz=T,border=NA,xlim=c(0,100),col=myColour2,cex.names=0.85,axes=F,add=T)
arrows(45,-0.5,45,20.5,lwd=1.5,length=0,xpd=T,col="skyblue3")
arrows(45,-0.5,45,-0.75,lwd=3,length=0,xpd=T)
arrows(45,20.5,45,20.75,lwd=3,length=0,xpd=T)
text(41,20.5,"Average",adj=1,xpd=T,cex=0.65,font=3)
text(44,20.5,"45",adj=1,xpd=T,cex=0.65,family="Arial",font=4)
text(100,20.5,"All values in percent",adj=1,xpd=T,cex=0.65,font=3)
mtext(c(0,20,40,60,80,100),at=c(0,20,40,60,80,100),1,line=0,cex=0.80)
mtext("'I Definitely Believe in God or a Supreme Being'",3,line=1.3,adj=0,cex=1.2,family="Arial Black",outer=T)
mtext("was said in 2010 in:",3,line=-0.4,adj=0,cex=0.9,outer=T)
mtext("Source: www.ipsos-na.com, Design: Stefan Fichtel, ixtract",1,line=1,adj=1.0,cex=0.65,outer=T,font=3)
dev.off()
load("session3.RData")
summary(session3)
attach(session3)
z<-NULL
y<-table(as.matrix(v165)); y
z<-c(z,100*(y["1"]+y["2"])/sum(y));z
y<-table(as.matrix(v164))
z<-c(z,100*(y["1"]+y["2"])/sum(y))
y<-table(as.matrix(v163))
z<-c(z,100*(y["1"]+y["2"])/sum(y))
y<-table(as.matrix(v162))
z<-c(z,100*(y["1"]+y["2"])/sum(y))
y<-table(as.matrix(v161))
z<-c(z,100*(y["1"]+y["2"])/sum(y))
y<-table(as.matrix(v160))
z<-c(z,100*(y["1"]+y["2"])/sum(y))
y<-c(0,table(as.matrix(v159))); y
z<-c(z,100*(y["1"]+y["2"])/sum(y))
z<-NULL
y<-table(as.matrix(v165))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-table(as.matrix(v164))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-table(as.matrix(v163))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-table(as.matrix(v162))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-table(as.matrix(v161))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-table(as.matrix(v160))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-c(0,table(as.matrix(v159))); y
z<-c(z,100*(y[1]+y[2])/sum(y)); z
myC_v159<-"A working mother can establish just as warm and\nsecure an environment as a non-working mother"
myC_v160<-"A pre-school child is likely to suffer if\nhis or her mother is working"
myC_v161<-"A job is alright, but what most women\nreally want is a home and children"
myC_v162<-"Being a housewife is just as fulfilling as\nworking"
myC_v163<-"Having a job is the best way for a woman\nto be independent"
myC_v164<-"Both the husband and wife should contribute\nto the family income"
myC_v165<-"In general, fathers are as well suited to\nlook after their children as women"
myC_v166<-"Men should take as much responsibility\nas women for their household and children"
mynames<-c(myC_v165, myC_v164, myC_v163, myC_v162, myC_v161, myC_v160, myC_v159)
png_file<-"./barcharts_multiple_3.png"
png(bg="grey98", png_file,width=12,height=6.5,units="in",res=200)
par(omi=c(0.65,0.75,1.25,0.75),mai=c(0.9,4.2,0.55,0),lheight=1.15,family="Arial",las=1)
bp<-barplot(z,names.arg=F,horiz=T,border=NA,xlim=c(0,100),
col=c(rep("grey",7)),axes=F,family="Arial")
myColour<-rgb(114,88,166,maxColorValue=255)
rect(0,-0.1,20,8.6,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
rect(20,-0.1,40,8.6,col=rgb(191,239,255,120,maxColorValue=255),border=NA)
rect(40,-0.1,60,8.6,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
rect(60,-0.1,80,8.6,col=rgb(191,239,255,120,maxColorValue=255),border=NA)
rect(80,-0.1,100,8.6,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
z2<-c(0,0,87.64940,0,0,0,0)
bp<-barplot(z2,names.arg=F,horiz=T,border=NA,xlim=c(0,100),
col=myColour,axes=F,add=T)
for (i in 1:length(mynames))
{
if (i == 3) {myFont<-"Arial Black"} else {myFont<-"Arial"}
text(-4,bp[i],mynames[i],xpd=T,adj=1,family=myFont,cex=0.9)
text(10,bp[i],format(round(z[i],1),nsmall=1),family=myFont,cex=1.15,
col=ifelse(i==4,"white","black"))
}
dev.off()
z<-NULL
y<-table(as.matrix(v165))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-table(as.matrix(v164))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-table(as.matrix(v163))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-table(as.matrix(v162))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-table(as.matrix(v161))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-table(as.matrix(v160))
z<-c(z,100*(y[1]+y[2])/sum(y))
y<-c(0,table(as.matrix(v159))); y
z<-c(z,100*(y[1]+y[2])/sum(y)); z
myC_v159<-"A working mother can establish just as warm and\nsecure an environment as a non-working mother"
myC_v160<-"A pre-school child is likely to suffer if\nhis or her mother is working"
myC_v161<-"A job is alright, but what most women\nreally want is a home and children"
myC_v162<-"Being a housewife is just as fulfilling as\nworking"
myC_v163<-"Having a job is the best way for a woman\nto be independent"
myC_v164<-"Both the husband and wife should contribute\nto the family income"
myC_v165<-"In general, fathers are as well suited to\nlook after their children as women"
myC_v166<-"Men should take as much responsibility\nas women for their household and children"
mynames<-c(myC_v165, myC_v164, myC_v163, myC_v162, myC_v161, myC_v160, myC_v159)
png_file<-"./barcharts_multiple_3.png"
png(bg="grey98", png_file,width=12,height=6.5,units="in",res=200)
par(omi=c(0.65,0.75,1.25,0.75),mai=c(0.9,4.2,0.55,0),lheight=1.15,family="Arial",las=1)
bp<-barplot(z,names.arg=F,horiz=T,border=NA,xlim=c(0,100),
col=c(rep("grey",7)),axes=F,family="Arial")
myColour<-rgb(114,88,166,maxColorValue=255)
rect(0,-0.1,20,8.6,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
rect(20,-0.1,40,8.6,col=rgb(191,239,255,120,maxColorValue=255),border=NA)
rect(40,-0.1,60,8.6,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
rect(60,-0.1,80,8.6,col=rgb(191,239,255,120,maxColorValue=255),border=NA)
rect(80,-0.1,100,8.6,col=rgb(191,239,255,80,maxColorValue=255),border=NA)
z2<-c(0,0,87.64940,0,0,0,0)
bp<-barplot(z2,names.arg=F,horiz=T,border=NA,xlim=c(0,100),
col=myColour,axes=F,add=T)
for (i in 1:length(mynames))
{
if (i == 3) {myFont<-"Arial Black"} else {myFont<-"Arial"}
text(-4,bp[i],mynames[i],xpd=T,adj=1,family=myFont,cex=0.9)
text(10,bp[i],format(round(z[i],1),nsmall=1),family=myFont,cex=1.15,
col=ifelse(i==3,"white","black"))
}
dev.off()
setwd("~/Bureau/ACO/stat/cours/sensometrie")
rm(list=ls())
senso <- read.table("./senso.txt", header=TRUE )
ind <- names(senso)
test1 <- senso["E158.H1"]
test2 <- senso["E158.H2"]
unique_name <- apply(ind[1:length(ind)], FUN=function(i) strsplit(i, "[.]"))
senso_ind <- read.csv("./Descriptive.csv", sep=";", header=TRUE)
nbre_ind <- length(senso_ind$Ind)
nbre_hierarchie <- senso_ind$Nbdehiérarchies
require(FactoMineR)
senso
senso["E254.H2"]
senso[, -1]
data.frame(senso, senso[-1])
t <- data.frame(senso, senso[-1])
t
dim(t)
senso_ind <- read.csv("./Descriptive.csv", sep=";", header=TRUE)
nbre_ind <- length(senso_ind$Ind)
nbre_hierarchie <- senso_ind$Nbdehiérarchies
require(FactoMineR)
afm <- FactoMineR::MFA(senso_ind, group = nbre_hierarchie)
nbre_hierarchie
afm <- FactoMineR::MFA(senso_ind[-1], group = nbre_hierarchie)
senso_ind
senso_ind
senso
dim(senso)
# Importation du dataset
data <- read.csv("trih.txt", sep = "\t", stringsAsFactors = TRUE, header = TRUE)
# Importation du dataset
data <- read.csv("trih.txt", sep = "\t", stringsAsFactors = TRUE, header = TRUE)
str(data)
rownames(data) <- data$Stimuli
#tableau pour un seul individu
data_E82 <- data.frame(data[1],data[4:6], data[4:6], data[4:6], fact[,-1])
# Importation du dataset
data <- read.csv("trih.txt", sep = "\t", stringsAsFactors = TRUE, header = TRUE)
str(data)
rownames(data) <- data$Stimuli
#tableau pour un seul individu
data_E82 <- data.frame(data[1],data[4:6], data[4:6], data[4:6], fact[,-1])
fact <- read.csv("Design.xls", header = T, sep = ";", fileEncoding = "latin1")
rm(list=ls())
rm(list=ls())
# Importation du dataset
data <- read.csv("trih.txt", sep = "\t", stringsAsFactors = TRUE, header = TRUE)
str(data)
rownames(data) <- data$Stimuli
#tableau pour un seul individu
data_E82 <- data.frame(data[1],data[4:6], data[4:6], data[4:6], fact[,-1])
fact <- read.csv("Design.xls", header = T, sep = ";", fileEncoding = "latin1")
descr <- read.csv("Descriptive.csv", header = TRUE, sep = ";", fileEncoding = "Latin1")
fact <- read.csv("Design.xls", header = T, sep = ";", fileEncoding = "Latin1")
fact <- read.csv("Design.xls", header = T, sep = ";", fileEncoding = "utf-8")
setwd("~/Bureau/ACO/stat/cours/sensometrie")
fact <- read.csv("./Design.xls", header = T, sep = ";", fileEncoding = "utf-8")
fact <- read.csv("./Design.csv", header = T, sep = ";", fileEncoding = "utf-8")
MFA <- FactoMineR::MFA(data2[,-1], group = c(nbpart, 429), graph = T, num.group.sup = c(171))
rm(list=ls())
setwd("~/Bureau/ACO/stat/cours/sensometrie")
# Importation du dataset
data <- read.csv("trih.txt", sep = "\t", stringsAsFactors = TRUE, header = TRUE)
str(data)
rownames(data) <- data$Stimuli
#tableau pour un seul individu
data_E82 <- data.frame(data[1],data[4:6], data[4:6], data[4:6], fact[,-1])
# Importation du dataset
data <- read.csv("trih.txt", sep = "\t", stringsAsFactors = TRUE, header = TRUE)
str(data)
rownames(data) <- data$Stimuli
#tableau pour un seul individu
data_E82 <- data.frame(data[1],data[4:6], data[4:6], data[4:6], fact[,-1])
descr <- read.csv("Descriptive.csv", header = TRUE, sep = ";", fileEncoding = "Latin1")
str(descr)
nbpart <- descr$Nbdehiérarchies # nb de hiérarchies par indiv
library(FactoMineR)
descr <- read.csv("Descriptive.csv", header = TRUE, sep = ";", fileEncoding = "utf-8")
str(descr)
nbpart <- descr$Nbdehiérarchies # nb de hiérarchies par indiv
library(FactoMineR)
fact <- read.csv("./Design.csv", header = T, sep = ";", fileEncoding = "utf-8")
MFA <- FactoMineR::MFA(data2[,-1], group = c(nbpart, 429), graph = T, num.group.sup = c(171))
data2[431]
MFA_E82 <- FactoMineR::MFA(data_E82[,-1],
group = c(3,3,rep(1,10)),
type = c(rep("s",5), rep("n", 7)),
name.group = c("E82", "E82", "H1", "H2", "H3", colnames(fact[-1])),
num.group.sup = c(3:12))
data <- read.csv("trih.txt", sep = "\t", stringsAsFactors = TRUE, header = TRUE)
rownames(data) <- data$Stimuli
data2 <- data.frame(data, data[-1], fact[,-1])
dim(data2)
nfact.sup = dim(data)[2] - 1
noms_ind <- as.character(descr$Ind)
MFA_tot <- FactoMineR::MFA(data2[,-1],
group = c(nbpart,rep(1, nfact.sup + 7)),
type = c(rep("s", length(noms_ind) + nfact.sup), rep("n", 7)),
# name.group = c(noms_ind, names(data[,-1]), colnames(fact[-1])),
num.group.sup = c((length(noms_ind)+1):606))
??MFA
setwd("~/Bureau/ACO/stat/cours/sensometrie")
adults <- read.csv("./Donnees_adultes2.csv", sep=";", header=TRUE)
adults <- read.csv("./donnes_perception/Donnees_adultes2.csv", sep=";", header=TRUE)
adults <- read.csv("./donnees_perception/Donnees_adultes2.csv", sep=";", header=TRUE)
enfants <- read.csv("./donnees_perception/Donnees_enfants2.csv", sep=";", header=TRUE)
names(adults)
names(enfants)
summary(adults)
summary(enfants)
adults$Glacage <- factor(adults$Glacage)
adults$Fourrage <- factor(adults$Fourrage)
adults$Eclair <- factor(adults$Eclair)
adults$Attentes.gustatives <- factor(adults$Attentes.gustatives)
adults$Ressenti <- factor(adults$Ressenti)
enfants$Glacage <- factor(enfants$Glacage)
enfants$Fourrage <- factor(enfants$Fourrage)
enfants$Eclair <- factor(enfants$Eclair)
enfants$Attentes.gustatives <- factor(enfants$Attentes.gustatives)
enfants$Ressenti <- factor(enfants$Ressenti)
summary(enfants$Age.enfant)
adults$Glacage
adults$Int.Chocolat
?ifelse
install.packages("ade4")
library(ade4)
adults$Int.Chocolat <- factor(adults$Int.Chocolat)
adults$Sucre <- factor(adults$Sucre)
adults$Lait <- factor(adults$Lait)
adults$Amer <- factor(adults$Amer)
acm.disjonctif(adults)
disj <- acm.disjonctif(adults)
disj
library(FactoMineR)
disj <- acm.disjonctif(adults["Int.Chocolat", "Sucre", "Lait", "Amer"])
disj <- acm.disjonctif(adults[,c("Int.Chocolat", "Sucre", "Lait", "Amer")])
disj
dataComp <- data.frame(adults["Liking"], disj)
head(dataComp)
?FactoMineR
lm <- LinearModel(Liking~., data=dataComp, selection = "bic")
lm
